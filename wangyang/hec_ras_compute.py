import win32com.client
import os
import time

#  ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå HEC-RAS
RAS_PROJECT = r"C:\wangyang\RAS_Wangyang1D\Wangyang1D.prj"
RAS_PROJECT = os.path.abspath(RAS_PROJECT)
print(f"Using project file: {RAS_PROJECT}")

#  ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö HEC-RAS ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
RAS_VERSIONS = ["RAS630.HECRASController"]
ras = None

#  ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå DSS
dss_file = r"C:\wangyang\RAS_Wangyang1D\Wangyang1D.dss"

# üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if os.path.exists(dss_file):
    try:
        os.remove(dss_file)
        print(f"Deleted DSS file: {dss_file}")
    except Exception as e:
        print(f"Failed to delete DSS file: {e}")
else:
    print(f"DSS file not found: {dss_file}")


for version in RAS_VERSIONS:
    try:
        ras = win32com.client.Dispatch(version)
        print(f"Connected to HEC-RAS using {version}")
        break
    except Exception as e:
        print(f"Failed to connect using {version}: {e}")
        continue

if ras is None:
    print("Failed to connect to any HEC-RAS version.")
    exit()

#  ‡πÄ‡∏õ‡∏¥‡∏î HEC-RAS ‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
try:
    ras.ShowRas()
    time.sleep(2)  # ‡πÉ‡∏´‡πâ HEC-RAS ‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î GUI
    ras.Project_Open(RAS_PROJECT)

    if not ras.Project_Current():
        print("No project is currently open!")
        exit()
    else:
        print(f"Project '{ras.Project_Current()}' is open.")

    #  ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    plans_info = ras.Plan_Names()
    if isinstance(plans_info, tuple) and len(plans_info) > 1:
        plans = plans_info[1]  # ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô
    else:
        print("Error: Unexpected plan structure received.")
        exit()

    print(f"Available Plans: {plans}")

    #  ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ú‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å (‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
    if not ras.PlanOutput_IsCurrent():
        ras.Plan_SetCurrent(plans[0])
    print(f"Current plan set to: {plans[0]}")

    #  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    geom_file = ras.CurrentGeomFile()
    flow_file = ras.CurrentUnSteadyFile()
    plan_file = ras.CurrentPlanFile()
    print(f" Geometry File: {geom_file}")
    print(f" Unsteady Flow File: {flow_file}")
    print(f" Plan File: {plan_file}")

    #  ‡∏£‡∏±‡∏ô Compute Unsteady Flow Analysis ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á RC.Compute_CurrentPlan(None, None, True)
    print(f" Running Unsteady Flow Analysis for Plan: {plans[0]} ...")
    success, code, message, _ = ras.Compute_CurrentPlan(None, None, True)

    print(f" Computation Result: {success}, Code: {code}, Message: {message}")

    if success:
        print("Unsteady Flow Analysis completed successfully.")
    else:
        print(f" Error while running Unsteady Flow Analysis: {message}")

    #  ‡∏õ‡∏¥‡∏î HEC-RAS
    ras.QuitRas()
    print("HEC-RAS closed successfully.")

except Exception as e:
    print(f" Error while running Unsteady Flow Analysis: {e}")
    exit()
